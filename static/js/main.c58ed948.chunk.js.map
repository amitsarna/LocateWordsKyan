{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","speech","Speech","originalWordList","squares","Array","fill","i","newword","rand","Math","floor","random","length","word","includes","state","started","currentWord","currentScore","endTime","Date","now","remaining","toggleStartStop","bind","repeatCurrentWord","init","slice","speak","text","setState","handleClick","clearInterval","timer","setInterval","diff","ceil","buttonText","renderSquare","align","height","disabled","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c58ed948.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Speech from 'speak-tts';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n      return (\r\n        <button className=\"square\" onClick={() => this.props.onClick()}>\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    \r\n    speech = new Speech()\r\n\r\n    originalWordList =  [\"put\", \"will\", \"little\", \"out\", \"him\", \"could\", \"have\", \"with\", \"don't\", \"had\", \"what\", \"one\", \"there\", \"but\", \r\n          \"very\", \"just\", \"back\", \"about\", \"come\", \"went\", \"for\", \"some\", \"made\", \"the\", \"and\", \"a\", \"to\", \"said\", \"all\",\r\n        \"you\", \"me\", \"she\", \"come\", \"go\", \"of\", \"where\", \"was\", \"far\", \"away\", \"am\", \"we\", \"her\", \"they\", \"as\", \"be\",\r\n      \"at\", \"not\", \"then\"];\r\n    \r\n      \r\n\r\n    constructor(props)\r\n    {\r\n      super(props);\r\n\r\n      var squares = Array(25).fill(null);\r\n\r\n      for (var i = 0; i < 25; ++i)\r\n      {\r\n        var newword = \"\"; \r\n        while(true)\r\n      {\r\n        const rand = Math.floor(Math.random() * this.originalWordList.length);\r\n        const word = this.originalWordList[rand];\r\n        if (!squares.includes(word))\r\n        {\r\n          newword = word;\r\n          break;\r\n        }\r\n      }\r\n\r\n      squares[i] = newword;\r\n      }\r\n\r\n      this.state = {\r\n        squares: squares,\r\n        started: false,\r\n        currentWord : \"\",\r\n        currentScore : 0,\r\n        endTime : Date.now(),\r\n        remaining : \"0\"\r\n      };\r\n\r\n      this.toggleStartStop = this.toggleStartStop.bind(this);\r\n      this.repeatCurrentWord = this.repeatCurrentWord.bind(this);\r\n      this.speech.init({\r\n        'voice':'UK English Male'\r\n      });\r\n    }\r\n\r\n    handleClick(i) \r\n    {\r\n      const squares = this.state.squares.slice();\r\n      \r\n      // check if the word is the word we're looking for\r\n      if (squares[i] === this.state.currentWord)\r\n      {\r\n        var newword = \"\"; \r\n\r\n        while(true)\r\n        {\r\n          const rand = Math.floor(Math.random() * this.originalWordList.length);\r\n          const word = this.originalWordList[rand];\r\n          if (!squares.includes(word))\r\n          {\r\n            newword = word;\r\n            break;\r\n          }\r\n        }\r\n\r\n        squares[i] = newword;\r\n\r\n        var word = this.state.squares[Math.floor(Math.random() * 25)]\r\n        this.speech.speak({text: word})\r\n\r\n        this.setState(\r\n          {\r\n            squares: squares,\r\n            currentScore: this.state.currentScore + 1,\r\n            currentWord: word\r\n          }\r\n        );\r\n      }\r\n    }\r\n    \r\n\r\n    renderSquare(i) {\r\n      return <Square value={this.state.squares[i]} onClick={() => this.handleClick(i)} />;\r\n    }\r\n\r\n    repeatCurrentWord()\r\n    {\r\n      this.speech.speak({text: this.state.currentWord})\r\n    }\r\n\r\n    toggleStartStop()\r\n    {\r\n      if (this.state.started)\r\n      {\r\n        this.setState({\r\n          started: false,\r\n          currentWord: \"\",\r\n          endTime : Date.now(),\r\n          remaining : \"0\"\r\n        })\r\n\r\n        clearInterval(this.timer);\r\n      }\r\n      else\r\n      {\r\n        var word = this.state.squares[Math.floor(Math.random() * 25)]\r\n        this.speech.speak({text: word})\r\n\r\n        var endTime = Date.now() + 60000\r\n        \r\n        this.setState({\r\n          started: true,\r\n          currentScore: 0,\r\n          currentWord: word,\r\n          endTime : endTime\r\n        })\r\n\r\n        this.timer = setInterval(() => {\r\n          \r\n          var diff = Math.ceil((this.state.endTime - Date.now()) / 1000);\r\n          \r\n          if (diff < 0)\r\n          {\r\n            this.toggleStartStop()\r\n          }\r\n          else\r\n          {\r\n            this.setState({\r\n              remaining : diff\r\n            })\r\n          }\r\n\r\n          \r\n        });\r\n      }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      clearInterval(this.timer);\r\n    }\r\n  \r\n    render() {\r\n  \r\n      var buttonText = this.state.started ? \"Stop\" : \"Start\";\r\n\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n            {this.renderSquare(9)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(10)}\r\n            {this.renderSquare(11)}\r\n            {this.renderSquare(12)}\r\n            {this.renderSquare(13)}\r\n            {this.renderSquare(14)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(15)}\r\n            {this.renderSquare(16)}\r\n            {this.renderSquare(17)}\r\n            {this.renderSquare(18)}\r\n            {this.renderSquare(19)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(20)}\r\n            {this.renderSquare(21)}\r\n            {this.renderSquare(22)}\r\n            {this.renderSquare(23)}\r\n            {this.renderSquare(24)}\r\n          </div>\r\n          <div align=\"center\">\r\n            <br/>\r\n            <button height=\"200px\" onClick={this.toggleStartStop}>{buttonText}</button>\r\n            &nbsp;\r\n            <button height=\"200px\" onClick={this.repeatCurrentWord} disabled={!this.state.started}>Repeat Word</button>\r\n            <br/><br/>\r\n            Score : {this.state.currentScore}\r\n            <br/><br/>\r\n            {this.state.remaining} seconds left\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}